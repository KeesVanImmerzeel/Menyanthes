sp::over(hmpointshape, polygn, returnList = FALSE, fn = NULL)
length(polygn)
length(hmpointshape)
View(hmpointshape)
crs(polygn)
sp::crs(polygn)
polygn@proj4string
str(hm)
str(hm1)
hm <- hm1
# Create a shape file from HydroMonitor ObservationWell data object.
hm_create_shp( hm, "tmp.shp")
hmpointshape <- raster::shapefile("tmp.shp")
p <- polygn
#
p %<>% spTransform(crsAfoort)
#
sp::over(hmpointshape, P, returnList = FALSE, fn = NULL)
#
sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
hmpointshape <- raster::shapefile("tmp.shp")
hmpointshape %<>% spTransform(crsAfoort)
#
sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
# Spatial overlay
i <- sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
str(hm)
?menyanthes
i
str(hm$xm)
hm <- hm1
str(hm$xm)
# Create a shape file from HydroMonitor ObservationWell data object.
hm_create_shp( hm, "tmp.shp")
hmpointshape <- raster::shapefile("tmp.shp")
raster::plot(hmpointshape)
p %<>% spTransform(crsAfoort)
hmpointshape %<>% spTransform(crsAfoort)
# Spatial overlay
i <- sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
str(hmpointshape)
str(hmpointshape@data)
hmpointshape@data$NAME
i
!is.na(i)
hmpointshape@data$NAME[!is.na(i)]
sel_names <- hmpointshape@data$NAME[!is.na(i)]
dplyr::filter(hm$xm, NAME %in% sel_names )
hm$xd %<>% dplyr::semi_join(hm$xm, by = "NAME")
str(hm$xd)
library(menyanthes)
document()
file.path(path.expand("~"),"tmp.shp")
?hm_filter_on_poly
hm <- hm1
p <- polygn
hm_pfiltered <- hm_filter_on_poly(hm, p)
hm_filtered_on_polygon <- hm_filter_on_poly(hm, p)
use_data(hm_filtered_on_polygon,internal=TRUE)
use_data(hm_filtered_on_polygon,internal=TRUE,overwrite=TRUE)
raster::plot(hm_filtered_on_polygon)
str(hm_filtered_on_polygon)
hm <- hm1
p <- polygn
hm_filtered_on_polygon <- hm_filter_on_poly(hm, p)
?use_data
use_data(hm_filtered_on_polygon, internal=TRUE)
test <- readRDS('R/sysdata.rda')
devtools::use_data(hm_filtered_on_polygon, internal=TRUE)
library(devtools)
?use_data
test <- load('R/sysdata.rda')
str(test)
hm_filtered_on_polygon
use_data(hm_filtered_on_polygon)
# Code to recreate internal data in R/sysdata.rda.
#
crsAfoort <- sp::CRS("+init=epsg:28992") # epsg projection 28992 - amersfoort
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
use_data(crsAfoort, hm_filtered_on_polygon, internal=TRUE, overwrite=TRUE)
load_all()
document()
library(devtools)
library(menyanthes)
library(menyanthes)
document()
document()
library(devtools)
load_all()
crsAfoort
?use_data()
use_data(crsAfoort, overwrite=TRUE)
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
use_data(hm_filtered_on_polygon, internal=TRUE, overwrite=TRUE)
library(menyanthes)
?CRS
load_all()
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
raster::plot(polygn)
shapefile(polygn, 'polygn.shp')
getwd()
use_data_raw()
getwd()
filename <- ""data-raw/polygn.shp"
polygn <-
usethis::use_data(polygn, internal=TRUE, overwrite = TRUE)
filename <- ""data-raw/polygn.shp"
polygn <-
usethis::use_data(polygn, internal=TRUE, overwrite = TRUE)
filename <- ""data-raw/polygn.shp"
filename <- "data-raw/polygn.shp"
file.exists(fname)
fname <- "data-raw/polygn.shp"
file.exists(fname)
polygn <- raster::shapefile(fname)
raster::plot(polygn)
usethis::use_data(polygn, internal=TRUE, overwrite = TRUE)
crsAfoort <- sp::CRS("+init=epsg:28992") # epsg projection 28992 - amersfoort
## Code to prepare internal datasets
crsAfoort <- sp::CRS("+init=epsg:28992") # epsg projection 28992 - amersfoort
## Class "CRS" of coordinate reference system
crsAfoort <- sp::CRS("+init=epsg:28992") # epsg projection 28992 - amersfoort
## Create file R/sysdata.rda
usethis::use_data(crsAfoort, polygn, internal=TRUE, overwrite = TRUE)
## Code to prepare "hm_filtered_on_polygon" object, used to test function "hm_filter_on_poly".
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
str(hm_filtered_on_polygon )
## Create file R/sysdata.rda
usethis::use_data(crsAfoort, polygn, hm_filtered_on_polygon, internal=TRUE, overwrite = TRUE)
## Code to prepare external "polygn" object: polygon shape to be used in example of function hm_filter_on_poly.
fname <- "data-raw/polygn.shp"
polygn <- raster::shapefile(fname)
usethis::use_data(crsAfoort, polygn, hm_filtered_on_polygon, internal=FALSE, overwrite = TRUE)
crsAfoort <- sp::CRS("+init=epsg:28992") # epsg projection 28992 - amersfoort
## Code to prepare "hm_filtered_on_polygon" object, used to test function "hm_filter_on_poly".
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
## Create file R/sysdata.rda
usethis::use_data(crsAfoort, hm_filtered_on_polygon, internal=TRUE, overwrite = TRUE)
## Code to prepare "crsAfoort" object: Class "CRS" of coordinate reference system
crsAfoort <- sp::CRS("+init=epsg:28992") # epsg projection 28992 - amersfoort
## Code to prepare "hm_filtered_on_polygon" object, used to test function "hm_filter_on_poly".
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
## Create file R/sysdata.rda
usethis::use_data(crsAfoort, hm_filtered_on_polygon, internal=TRUE, overwrite = TRUE)
fname <- "data-raw/polygn.shp"
polygn <- raster::shapefile(fname)
usethis::use_data(crsAfoort, polygn, hm_filtered_on_polygon, internal=FALSE, overwrite = TRUE)
fname <- "data-raw/polygn.shp"
polygn <- raster::shapefile(fname)
usethis::use_data(polygn, internal=FALSE, overwrite = TRUE)
?crs()
?CRS()
?crs()
crs <- "+init=epsg:28992"
hm <- hm1
gxg_table <- hm %>% hm_gxg_table()
x <- hm$xm %>% dplyr::group_by(NAME) %>% dplyr::summarise(
X = mean(X),
Y = mean(Y),
NFILTRS = dplyr::n(),
TOP = max(TOP),
BOT = min(BOT),
MV = mean(MV, na.rm = TRUE)
)
x %<>% dplyr::left_join(gxg_table,by="NAME")
sp::coordinates(x) <- ~ X + Y
crs
?sp::proj4string
sp::proj4string(x) <- crsAfoort
crsAfoort <- sp::CRS("+init=epsg:28992")
sp::proj4string(x) <- crs
raster::plot(x)
sp::proj4string(x) <- crsAfoort
raster::plot(x)
hm_create_shp <- function(hm, filename, crs="+init=epsg:28992") {
gxg_table <- hm %>% hm_gxg_table()
x <- hm$xm %>% dplyr::group_by(NAME) %>% dplyr::summarise(
X = mean(X),
Y = mean(Y),
NFILTRS = dplyr::n(),
TOP = max(TOP),
BOT = min(BOT),
MV = mean(MV, na.rm = TRUE)
)
x %<>% dplyr::left_join(gxg_table,by="NAME")
sp::coordinates(x) <- ~ X + Y
sp::proj4string(x) <- crs
raster::shapefile(x, filename, overwrite = TRUE)
}
?proj4string()
proj4string(x)
hm_filter_on_poly <- function(hm, p, crs="+init=epsg:28992") {
if (length(p)==1) { # single polygon
# Create a shape file from HydroMonitor ObservationWell data object.
filename <-  file.path(path.expand("~"),"tmp.shp")
hm_create_shp( hm, filename)
hmpointshape <- raster::shapefile(filename)
# Make sure the point shape and polygon shape have the same CRS
p %<>% sp::spTransform(crs)
hmpointshape %<>% sp::spTransform(crs)
# Spatial overlay
i <- sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
sel_names <- hmpointshape@data$NAME[!is.na(i)]
#Filter meta data gegevens en stijghoogte gegevens
hm$xm %<>% dplyr::filter(NAME %in% sel_names )
hm$xd %<>% dplyr::semi_join(hm$xm, by = "NAME")
}
return(hm)
}
hm <- hm1
p <- polygn
hm_filtered_on_polygon <- hm_filter_on_poly(hm, p)
## Code to prepare "hm_filtered_on_polygon" object, used to test function "hm_filter_on_poly".
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
## Create file R/sysdata.rda
usethis::use_data(hm_filtered_on_polygon, internal=TRUE, overwrite = TRUE)
load_all()
document()
?hm_create_shp
document()
?hm_filter_on_poly
document()
?hm_create_shp()
fname <- system.file("extdata","export_data_menyanthes.csv",package="menyanthes")
fname
fname <- system.file("extdata","export_data_menyanthes.csv")
fname
fname <- system.file("extdata","export_data_menyanthes.csv",package="menyanthes")
fname
hm1 <- hm_read_export_csv( fname )
str(hm1)
fname <- system.file("extdata","export_data_menyanthes.csv",package="menyanthes")
hm1 <- hm_read_export_csv( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
## Create file R/sysdata.rda
usethis::use_data(hm1, hm_filtered_on_polygon, internal=TRUE, overwrite = TRUE)
fname <- system.file("extdata","export_data_menyanthes.csv",package="menyanthes")
hm1 <- hm_read_export_csv( fname )
usethis::use_data(hm1, internal=FALSE, overwrite = TRUE)
fname <- system.file("extdata","Topsoil1.csv",package="menyanthes")
hm2 <- hm_read_export_csv2( fname )
usethis::use_data(hm2, internal=FALSE, overwrite = TRUE)
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
## Create file R/sysdata.rda
usethis::use_data(hm3, hm4, hm5, hm_filtered_on_polygon, internal=TRUE, overwrite = TRUE)
document()
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
## Create file R/sysdata.rda
usethis::use_data(hm3, hm4, hm5, hm_filtered_on_polygon, internal=TRUE, overwrite = TRUE)
library(menyanthes)
?hm_create_shp()
?menyanthes
document()
?menyanthes()
library(menyanthes)
?menyanthes
library(devtools)
load_all()
hm <- hm1
x <- hm_plot(hm)
x$NAME[1]
x$plots[[1]]
which(x$NAME=="13250900B002")
str(hm$xm)
head(hm$xm)
which(x$NAME=="13250900B007")
x$plots(which(x$NAME=="13250900B007"))
x$plots[[which(x$NAME=="13250900B007")]]
NAME <- x$NAME[1]
NAME
NAME <- x$NAME[3]
x$plots[[which(x$NAME=="13250900B007")]]
x$plots[[which(x$NAME==NAME)]]
x$NAME
str(hm$xd)
hm_obs_periods( hm1 )
hm_obs_periods <- function( hm ) {
obs_periods <- hm$xd %>% group_by(NAME,FILTER) %>% summarise(min_date=min(DATE),max_date=max(DATE))
return(obs_periods)
}
hm_obs_periods( hm1 )
obs_periods <- hm_obs_periods( hm1 )
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
obs_periods <- hm_obs_periods( hm1 )
usethis::use_data(
hm3,
hm4,
hm5,
hm_filtered_on_polygon,
obs_periods,
internal = TRUE,
overwrite = TRUE
)
obs_periods
library(devtools)
use_appveyor()
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
obs_periods <- hm_obs_periods( hm1 )
## Create file R/sysdata.rda
usethis::use_data(
hm3,
hm4,
hm5,
hm_filtered_on_polygon,
obs_periods,
internal = TRUE,
overwrite = TRUE
)
library(devtools)
load_all()
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
obs_periods <- hm_obs_periods( hm1 )
## Create file R/sysdata.rda
usethis::use_data(
hm3,
hm4,
hm5,
hm_filtered_on_polygon,
obs_periods,
internal = TRUE,
overwrite = TRUE
)
obs_periods
usethis::use_data(
hm3,
hm4,
hm5,
hm_filtered_on_polygon,
obs_periods,
internal = TRUE,
overwrite = TRUE
)
hm1
library(menyanthes)
hm1
obs_periods <- hm_obs_periods( hm1 )
obs_periods
usethis::use_data(
hm3,
hm4,
hm5,
hm_filtered_on_polygon,
obs_periods,
internal = TRUE,
overwrite = TRUE
)
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
obs_periods <- hm_obs_periods( hm1 )
## Create file R/sysdata.rda
usethis::use_data(
hm3,
hm4,
hm5,
hm_filtered_on_polygon,
obs_periods,
internal = TRUE,
overwrite = TRUE
)
library(dplyr)
library(magrittr)
library(menyanthes)
# Totale bruto opbrengst (x1000 kg) per ha
opbrengst <- read.table("Akkerbouwgewassen__Totale_Bruto_opbrengst_per_ha_regio_oost_nederland_17082020_221448.csv",sep=";",
header=FALSE,na.strings=".",row.names=1,dec=",")
names(opbrengst) <- seq(1994,2019) %>% as.character()
opbrengst %<>% t() %>% as.data.frame()
opbrengst$Jaar <- row.names(opbrengst) %>% as.numeric()
row.names(opbrengst) <- NULL
rownames(opbrengst) <- seq(1994:2019) %>% as.numeric()
plot(opbrengst$Jaar,opbrengst$`Totaal tarwe`)
setwd("~/myR_on_GitHub/packages/menyanthes")
library(dplyr)
library(magrittr)
library(menyanthes)
# Totale bruto opbrengst (x1000 kg) per ha
opbrengst <- read.table("Akkerbouwgewassen__Totale_Bruto_opbrengst_per_ha_regio_oost_nederland_17082020_221448.csv",sep=";",
header=FALSE,na.strings=".",row.names=1,dec=",")
names(opbrengst) <- seq(1994,2019) %>% as.character()
opbrengst %<>% t() %>% as.data.frame()
opbrengst$Jaar <- row.names(opbrengst) %>% as.numeric()
row.names(opbrengst) <- NULL
rownames(opbrengst) <- seq(1994:2019) %>% as.numeric()
plot(opbrengst$Jaar,opbrengst$`Totaal tarwe`)
library(dplyr)
library(magrittr)
library(menyanthes)
# Totale bruto opbrengst (x1000 kg) per ha
opbrengst <- read.table("Akkerbouwgewassen__Totale_Bruto_opbrengst_per_ha_regio_oost_nederland_17082020_221448.csv",sep=";",
header=FALSE,na.strings=".",row.names=1,dec=",")
getwd()
library(devtools)
load_all()
## Code to prepare external datasets (visible to user)
## Code to prepare external "hm1" example dataset (HydroMonitor Observation Well data).
fname <- system.file("extdata","export_data_menyanthes.csv",package="menyanthes")
hm1 <- hm_read_export_csv( fname )
usethis::use_data(hm1, internal=FALSE, overwrite = TRUE)
## Code to prepare external "hm2" example dataset (HydroMonitor Observation Well data).
fname <- system.file("extdata","Topsoil1.csv",package="menyanthes")
hm2 <- hm_read_export_csv2( fname )
usethis::use_data(hm2, internal=FALSE, overwrite = TRUE)
## Code to prepare external "polygn" object: polygon shape to be used in example of function hm_filter_on_poly.
fname <- "data-raw/polygn.shp"
polygn <- raster::shapefile(fname)
usethis::use_data(polygn, internal=FALSE, overwrite = TRUE)
usethis::use_data(hm1, hm2, polygn, internal=FALSE, overwrite = TRUE)
library(menyanthes)
.libPaths()
hm_obs_periods( hm1 )
str(obs_periods)
test <- read("R/sysdata.rda")
obs_periods <- hm_obs_periods( hm1 )
str(obs_periods)
test <- hm_obs_periods( hm1 )
str(test)
Identical(obs_periods,test)
identical(obs_periods,test)
test[1,]
## Code to prepare internal datasets (file "R/sysdata.rda")
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
obs_periods <- hm_obs_periods( hm1 )
## Create file R/sysdata.rda
usethis::use_data(
hm3,
hm4,
hm5,
hm_filtered_on_polygon,
obs_periods,
internal = TRUE,
overwrite = TRUE
)
str(obs_periods)
hm_obs_periods <- function(hm) {
obs_periods <-
hm$xd %>% group_by(NAME, FILTER) %>% summarise(min_date = min(DATE), max_date =
max(DATE)) %>% as.data.frame()
return(obs_periods)
}
str(hm_obs_periods( hm1 ))
hm_obs_periods( hm1 )
library(dplyr)
hm_obs_periods <- function(hm) {
obs_periods <-
hm$xd %>% group_by(NAME, FILTER) %>% summarise(min_date = min(DATE), max_date =
max(DATE)) %>% as.data.frame()
return(obs_periods)
}
hm_obs_periods( hm1 )
str(hm_obs_periods( hm1 ))
obs_periods <- hm_obs_periods( hm1 )
str(obs_periods)
## Code to prepare internal datasets (file "R/sysdata.rda")
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
obs_periods <- hm_obs_periods( hm1 )
## Create file R/sysdata.rda
usethis::use_data(
hm3,
hm4,
hm5,
hm_filtered_on_polygon,
obs_periods,
internal = TRUE,
overwrite = TRUE
)
