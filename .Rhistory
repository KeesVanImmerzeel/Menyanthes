xd$DATE <- lubridate::dmy(xd$DATE)
str(xd)
str(hm1)
xd$DATE <- lubridate::dmy(xd$DATE) %>% as.POSIXct()
?as.POSIXct()
xd$NAME %<>% remove_trailing_letter(.)
#xd$NAME %<>% remove_trailing_letter(.)
xd <- xd[!is.na(xd$HEAD),] # Remove NA values
str(xd)
hm <- list()
hm$xm <- xm
hm$xd <- xd
# Remove double filters and observations
hm %<>% hm_rm_dble_fltrs()
hm %<>% hm_rm_dble_obs()
library(menyanthes)
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_export_csv( fname )
hm3 <- hm_read_dino( fname )
str(hm3)
library(menyanthes)
fname <- system.file("extdata","B38E0108001_1.csv",package="menyanthes")
hm3 <- hm_read_dino( fname )
str(hm3)
head(hm3)
str(hm3$xm)
str(hm3$xd)
library(devtools)
use_data(hm3)
library(menyanthes)
hm3
getwd()
fname
attr(fname)
con <- file(fname)
attr(con)
attributes(con)
test <- C:/Users/NLCIMM/Documents/R/win-library/4.0/menyanthes/extdata"
test <- "C:/Users/NLCIMM/Documents/R/win-library/4.0/menyanthes/extdata"
con <- file(test)
attributes(con)
dir.exists(fname)
dir.exists(test)
?menyanthes
?menyanthes
?dir.exists
library(menyanthes)
## Functions in this package
- `hm_read_export_csv()`: Read export HydroMonitor file with ObservationWell data.
- `hm_read_export_csv2()`: Read export HydroMonitor file with ObservationWell data with missing header.
- `hm_read_dino()`: Read export Dino *_1.csv file with measured heads.
- `hm_read_dino_path`: Read all export Dino *_1.csv files with measured heads in specified folder.
- `hm_filter_on_year()`: Filter HydroMonitor ObservationWell data on year.
- `hm_calc_gxg()`: Calculate GxG's of HydroMonitor ObservationWell data.
- `hm_plot()`: Plot HydroMonitor ObservationWell data.
- `nr_obs_ratio()`: Ratio's (# observations in filter) / (average # of observations in monitoring well)
## Functions in this package
- hm_read_export_csv(): Read export HydroMonitor file with ObservationWell data.
- `hm_read_export_csv2()`: Read export HydroMonitor file with ObservationWell data with missing header.
- `hm_read_dino()`: Read export Dino *_1.csv file with measured heads.
- `hm_read_dino_path`: Read all export Dino *_1.csv files with measured heads in specified folder.
- `hm_filter_on_year()`: Filter HydroMonitor ObservationWell data on year.
- `hm_calc_gxg()`: Calculate GxG's of HydroMonitor ObservationWell data.
- `hm_plot()`: Plot HydroMonitor ObservationWell data.
- `nr_obs_ratio()`: Ratio's (# observations in filter) / (average # of observations in monitoring well)
## Get help
To get help on the functions in this package type a question mark before the function name, like `?hm_read_export_csv()`
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
file.exists(path)
if (!dir.exists(path)) {
stop('Specified path does not exist.')
}
# Retreive all *.csv filenames
fnames <- list.files(
path = path,
pattern = glob2rx("*_1.csv"),
full.names = TRUE,
recursive = TRUE,
ignore.case = TRUE
) %>% as.matrix()
path.expand("~/foo")
path %<>% path.expand(.)
path
fnames <- list.files(
path = path,
pattern = glob2rx("*_1.csv"),
full.names = TRUE,
recursive = TRUE,
ignore.case = TRUE
) %>% as.matrix()
fnames
str(fnames)
nrow(fnames)
test <- apply(fnames, MARGIN = 1, hm_read_dino)
str(test)
test <- apply(fnames, MARGIN = 1, hm_read_dino) %>% hm_rbind()
test <- apply(fnames, MARGIN = 1, hm_read_dino)
hm_list <- c(test, hm_list)
hm_list <- c(test, NULL)
n <- length(hm_list)
N
n
hm <- NA
hm <- NA
hm <- list()
hm$xm <- rbind(hm_list[[1]]$xm, hm_list[[2]]$xm)
hm$xd <- rbind(hm_list[[1]]$xd, hm_list[[2]]$xd)
hm%xm
hm$xm
hm %<>% hm_rbind(hm_list[-c(1, 2)])
hm %<>% hm_rm_dble_obs() %>% hm_rm_dble_fltrs()
test <- apply(fnames, MARGIN = 1, hm_read_dino)
str(test)
length(test)
x <- hm_rbind(test)
hm_rbind()
?hm_rbind()
str(test[[1]])
str(test[[2]])
str(test[[3]])
str(test[[4]])
str(test[[5]])
str(test[[6]])
str(test[[7]])
str(test[[8]])
str(test[[9]])
str(test[[10]])
str(test[[11]])
str(test[[12]])
str(test[[13]])
str(test[[14]])
x <- hm_rbind(test[[1]],test)
str(x)
test
str(test)
test <- apply(fnames, MARGIN = 1, hm_read_dino) %>% unlist()
x <- hm_rbind(test)
test <- apply(fnames, MARGIN = 1, hm_read_dino)
test[[1]]
head(test[[1]])
str(test[[1]])
x <- hm_rbind(test[[1]],test[[2]])
str(x)
x <- hm_rbind(test[[1]],test)
x <- hm_rbind(...=NULL,test)
x <- hm_rbind(test[[1]],test)
str(x$xm)
test <- apply(fnames, MARGIN = 1, hm_read_dino)
str(test)
x <- list(test)
str(x)
typeof(test)
typeof(test)=="list"
x <- hm_rbind(hm_list =test)
str(x)
test <- apply(fnames, MARGIN = 1, hm_read_dino)
x <- hm_rbind(hm_list =test)
str(x)
str(test)
library(menyanthes)
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
hm4 <- hm_read_dino_path( path )
library(devtools)
load_all()
hm4 <- hm_read_dino_path( path )
hm4
str(hm4)
path %<>% path.expand(.)
fnames <- list.files(
path = path,
pattern = glob2rx("*_1.csv"),
full.names = TRUE,
recursive = TRUE,
ignore.case = TRUE
) %>% as.matrix()
x <- apply(fnames, MARGIN = 1, hm_read_dino)
hm_rbind(x)
hm_rbind(x[[1]],hm_list=x)
test <- hm_rbind(x[[1]],hm_list=x)
str(test)
test <- hm_rbind(hm_list=x)
str(test)
x <- apply(fnames, MARGIN = 1, hm_read_dino)
length(x)
str(x)
x[[-c(1, 2)]]
x[-c(1, 2)]
length(x[-c(1, 2)])
hm_rbind(x)
hm_rbind(NULL,x)
length(x)
hm_rbind(NULL,hm_list=x)
test <- hm_rbind(NULL,hm_list=x)
str(x)
hm <- hm_rbind(hm1, hm2)
str(hm)
str(x)
list(hm1,hm2)
test <- list(hm1,hm2)
str(test)
hm_rbind <- function(hm_list) {
#hm_list <- c(list(...), hm_list)
n <- length(hm_list)
print(n)
hm <- NA
if (n == 1) {
hm <- hm_list[[1]]
} else if (n > 1) {
hm <- list()
hm$xm <- rbind(hm_list[[1]]$xm, hm_list[[2]]$xm)
hm$xd <- rbind(hm_list[[1]]$xd, hm_list[[2]]$xd)
if (n > 2) {
hm %<>% hm_rbind(hm_list[-c(1, 2)])
}
}
hm %<>% hm_rm_dble_obs() %>% hm_rm_dble_fltrs()
return(hm)
}
x <- apply(fnames, MARGIN = 1, hm_read_dino)
test <- hm_bind(x)
test <- hm_rbind(x)
x <- apply(fnames, MARGIN = 1, hm_read_dino)
hm_list <- x
hm <- NA
n <- length(hm_list)
n
hm <- hm_list[[1]]
for (i in 2:n) {
hm$xm %<>% rbind(hm_list[[i]]$xm)
hm$xd %<>% rbind(hm_list[[i]]$xd)
}
hm %<>% hm_rm_dble_obs() %>% hm_rm_dble_fltrs()
str(hm)
hm <- hm_rbind(list(hm1, hm2))
load_all()
hm <- hm_rbind(list(hm1, hm2))
load_all()
hm <- hm_rbind(list(hm1, hm2))
hm4 <- hm_read_dino_path( path )
str(hm4)
document()
library(devtools)
head(hm4$xm)
head(hm4$xd)
use_data(hm4)
document()
library(devtools)
library(menyanthes)
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
file.exists(fname)
fname
path <- system.file("extdata","Grondwaterstanden_Put",package="menyanthes")
file.exists(fname)
dir.exists(fname)
fname <- system.file("extdata","export_data_menyanthes.csv",package="menyanthes")
file.exists(fname)
fname
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
fname
library(menyanthes)
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
file.exists(fname)
fname
unzip(fname, files = "*_1.csv", overwrite = TRUE,
junkpaths = FALSE, exdir = "tmp")
unzip(fname, files = "Grondwatersamenstellingen_put/*_1.csv", overwrite = TRUE,
junkpaths = FALSE, exdir = "tmp")
unzip(fname, files = "Grondwaterstanden_Put/*_1.csv", overwrite = TRUE,
junkpaths = FALSE, exdir = "tmp")
unzip(fname, files = "*.pdf", overwrite = TRUE,
junkpaths = FALSE, exdir = "tmp")
unzip(fname, files = "Bericht van levering.pdf", overwrite = TRUE,
junkpaths = FALSE, exdir = "tmp")
fname
unzip(fname, files = "Bericht van levering.pdf", overwrite = TRUE,
junkpaths = FALSE, exdir = "tmp")
file.exists(fname)
fname
unzip(fname, overwrite = TRUE,
junkpaths = FALSE, exdir = "tmp")
fname
path.expand("~")
paste0(path.expand("~"),"/tmp")
unzip(fname, overwrite = TRUE,
junkpaths = FALSE, exdir = paste0(path.expand("~"),"/tmp"))
unzip(fname, overwrite = TRUE,
junkpaths = TRUE, exdir = paste0(path.expand("~"),"/tmp"))
fnames <- list.files(
path = path,
pattern = glob2rx("*_1.csv"),
full.names = TRUE,
recursive = TRUE,
ignore.case = TRUE
)
fnames
unzip(fname, overwrite = TRUE, files="Bericht van levering.pdf",
+       junkpaths = TRUE, exdir = paste0(path.expand("~"),"/tmp2"))
unzip(fname, overwrite = TRUE,
+       junkpaths = TRUE, exdir = paste0(path.expand("~"),"/tmp_hm_read_dino_zip"))
unzip(
fname,
overwrite = TRUE,
junkpaths = TRUE,
exdir = paste0(path.expand("~"), "/tmp_hm_read_dino_zip")
)
?list.files
extdir <- paste0(path.expand("~"), "/tmp_hm_read_dino_zip")
extdir
extdir <- paste0(path.expand("~"), "/tmp_hm_read_dino_zip")
unzip(
fname,
overwrite = TRUE,
junkpaths = TRUE,
exdir = extdir
)
unlink(extdir, recursive = TRUE, force = TRUE, expand = TRUE)
unzip(
fname,
overwrite = TRUE,
junkpaths = TRUE,
exdir = extdir
)
unlink(extdir, recursive = TRUE, force = TRUE, expand = TRUE)
unzip(
fname,
overwrite = TRUE,
junkpaths = TRUE,
exdir = extdir
)
extdir <- paste0(path.expand("~"), "/tmp_hm_read_dino_zip") # Temporary folder
unzip(
fname,
overwrite = TRUE,
junkpaths = TRUE,
exdir = extdir
)
hm <- hm_read_dino_path(extdir)
unlink(extdir, recursive = TRUE, force = TRUE, expand = TRUE) # Remove temporary folder
str(hm)
load_all()
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
hm5 <- hm_read_dino_zip( fname )
str(hm5)
use_data(hm5)
library(menyanthes)
library(devtools)
document()
?hm_read_dino_zip
fname <- system.file("extdata","Dino_export_18032020.zip",package="menyanthes")
file.exists(fname)
libPath
libPaths
.libPaths
.libPaths()
.libPaths
.libPaths()
library(menyanthes)
library(menyanthes)
?hm_read_dino_path
library(devtools)
hm <- hm1
load_all()
hm <- hm1
str(hm)
library(devtools)
load_all()
p <- raster::shapefile("p.shp")
filename <- path.expand("~")
filename
filename <- paste0(path.expand("~"),"/p.shp")
filename
file.exists(filename)
p <- raster::shapefile(filename)
plot(p)
str(p)
print(p)
raster::plot(p)
?use_data
?use_data(p)
use_data(p)
pol
polygn <- p
use_data(polygn)
raster::plot(polygn)
document()
document()
library(menyanthes)
?menyanthes
library(menyanthes)
?menyanthes
document()
load_all()
?menyanthes
p <- polygn
raster::plot(polygn)
?menyanthes
?hm_create_shp
s <- hm_create_shp(hm)
s <- hm_create_shp(hm1)
filename <- file.path(path.expand("~"),"hm.shp")
hm_create_shp(hm, filename)
hm_create_shp(hm1, filename)
?raster::shapefile
crsAfoort <- sp::CRS("+init=epsg:28992") # epsg projection 28992 - amersfoort
use_data(crsAfoort)
?use_data
?sp::over
hmpointshape <- raster::shapefile(filename)
raster::plot(hmpointshape)
sp::over(s, hmpointshape, returnList = FALSE, fn = NULL)
sp::over(polygn, hmpointshape, returnList = FALSE, fn = NULL)
str(polygn)
str(hmpointshape)
crs(polygn)
CRS(polygn)
proj4string(hmpointshape) <- crsAfoort
?spTransform
hmpointshape <- spTransform(hmpointshape,crsAfoort)
p <- spTransform(p,crsAfoort)
polygn <- spTransform(polygn,crsAfoort)
use_data(polygn)
use_data(polygn, overwrite=TRUE)
sp::over(polygn, hmpointshape, returnList = FALSE, fn = NULL)
sp::over(hmpointshape, polygn, returnList = FALSE, fn = NULL)
sp::over(hmpointshape, polygn, returnList = TRUE, fn = NULL)
sp::over(hmpointshape, polygn, returnList = FALSE, fn = NULL)
length(polygn)
length(hmpointshape)
View(hmpointshape)
crs(polygn)
sp::crs(polygn)
polygn@proj4string
str(hm)
str(hm1)
hm <- hm1
# Create a shape file from HydroMonitor ObservationWell data object.
hm_create_shp( hm, "tmp.shp")
hmpointshape <- raster::shapefile("tmp.shp")
p <- polygn
#
p %<>% spTransform(crsAfoort)
#
sp::over(hmpointshape, P, returnList = FALSE, fn = NULL)
#
sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
hmpointshape <- raster::shapefile("tmp.shp")
hmpointshape %<>% spTransform(crsAfoort)
#
sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
# Spatial overlay
i <- sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
str(hm)
?menyanthes
i
str(hm$xm)
hm <- hm1
str(hm$xm)
# Create a shape file from HydroMonitor ObservationWell data object.
hm_create_shp( hm, "tmp.shp")
hmpointshape <- raster::shapefile("tmp.shp")
raster::plot(hmpointshape)
p %<>% spTransform(crsAfoort)
hmpointshape %<>% spTransform(crsAfoort)
# Spatial overlay
i <- sp::over(hmpointshape, p, returnList = FALSE, fn = NULL)
str(hmpointshape)
str(hmpointshape@data)
hmpointshape@data$NAME
i
!is.na(i)
hmpointshape@data$NAME[!is.na(i)]
sel_names <- hmpointshape@data$NAME[!is.na(i)]
dplyr::filter(hm$xm, NAME %in% sel_names )
hm$xd %<>% dplyr::semi_join(hm$xm, by = "NAME")
str(hm$xd)
library(menyanthes)
document()
file.path(path.expand("~"),"tmp.shp")
?hm_filter_on_poly
hm <- hm1
p <- polygn
hm_pfiltered <- hm_filter_on_poly(hm, p)
hm_filtered_on_polygon <- hm_filter_on_poly(hm, p)
use_data(hm_filtered_on_polygon,internal=TRUE)
use_data(hm_filtered_on_polygon,internal=TRUE,overwrite=TRUE)
raster::plot(hm_filtered_on_polygon)
str(hm_filtered_on_polygon)
hm <- hm1
p <- polygn
hm_filtered_on_polygon <- hm_filter_on_poly(hm, p)
?use_data
use_data(hm_filtered_on_polygon, internal=TRUE)
test <- readRDS('R/sysdata.rda')
devtools::use_data(hm_filtered_on_polygon, internal=TRUE)
library(devtools)
?use_data
test <- load('R/sysdata.rda')
str(test)
hm_filtered_on_polygon
use_data(hm_filtered_on_polygon)
# Code to recreate internal data in R/sysdata.rda.
#
crsAfoort <- sp::CRS("+init=epsg:28992") # epsg projection 28992 - amersfoort
hm_filtered_on_polygon <- hm_filter_on_poly( hm1, polygn )
use_data(crsAfoort, hm_filtered_on_polygon, internal=TRUE, overwrite=TRUE)
load_all()
document()
library(devtools)
library(menyanthes)
library(menyanthes)
document()
document()
