}
if (!found) {
stop("This is not a export HydroMonitor file with ObservationWell data.")
}
close(con)
con <- file(fname, "r")
x <- readLines(con, warn = FALSE)
close(con)
i <- which(grepl("^;;", x))
# Determine column names of metadata and data
names_xm <- x[i[1] + 1] %>% strsplit(";") %>% unlist()
names_xd <- x[i[2] + 1] %>% strsplit(";") %>% unlist()
i
names_xm <- x[i[1] + 1] %>% strsplit(";") %>% unlist()
names_xd <- x[i[2] + 1] %>% strsplit(";") %>% unlist()
names_xm
names_xd
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
head(xm)
xm$V19 <- NULL
names(xm) <- names_xm
xm$FilterNo <- suppressWarnings(as.integer(xm$FilterNo))
xm <- xm[!is.na(xm$FilterNo),]
xm$StartDateTime <- lubridate::dmy_hm(xm$StartDateTime)
head(xm)
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
head(xm)
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
head(xm)
xm$V19 <- NULL
names(xm) <- names_xm
head(xm)
names(xm)
xm$FilterNo
head(xm)
xm$FilterNo <- suppressWarnings(as.integer(xm$FilterNo))
head(xm)
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
names(xm) <- names_xm
xm$Name %<>% remove_trailing_letter(.)
xm$FilterNo <- suppressWarnings(as.integer(xm$FilterNo))
head(xm)
x <- "foch1-1"
strsplit(x,"-")
tail(strsplit(x,"-"))
tail(strsplit(x,"-"), n=1)
strsplit(x,"-")
strsplit(x,"-")[2]
strsplit(x,"-")
y <- strsplit(x,"-")
y[2]
str(y)
library(magrittr)
strsplit(x,"-") %>% unlist()
strsplit(x,"-") %>% unlist() %>% .[2]
strsplit(x,"-") %>% unlist() %>% .[length(.)]
strsplit(x,c("-","_") %>% unlist() %>% .[length(.)]
strsplit(x,c("-","_")) %>% unlist() %>% .[length(.)]
head(xm)
xm %>% group_by("Name") %>% mutate(FilterNo=n())
head(xm)
xm %>% group_by("Name") %>% mutate(FilterNo=1:n())
xm[,new:= rowid(Name)]
xm %>% group_by("Name")
xm
xm %>% group_by("Name") %>% mutate(FilterNo=n())
xm %>% group_by("Name") %>% mutate(FilterNo=1:n())
xm %>% group_by("Name") %>% mutate(FilterNo=row_number())
xm %>% group_by("Name") %>% mutate(FilterNo=dplyr::row_number())
xm %>% group_by("Name") %>% mutate(FilterNo=dplyr::row_number())
xm$Name %<>% as.factor(.)
xm %>% group_by("Name") %>% mutate(FilterNo=dplyr::row_number())
xm %>% group_by(Name) %>% mutate(FilterNo=dplyr::row_number())
xm %>% group_by(Name) %>% mutate(flt2=dplyr::row_number()) # Filter numbers guessed when not explicitely specified
xm %<>% group_by(Name) %>% mutate(flt2=dplyr::row_number())
xm$flt2
xm %<>% group_by(Name) %>% mutate(FilterNo=dplyr::row_number())
xm
is.na(flt1)
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
names(xm) <- names_xm
xm$Name %<>% remove_trailing_letter(.)
# Assign filter number
flt1 <- suppressWarnings(as.integer(xm$FilterNo)) # Filter numbers when explicitely specified
flt1
is.na(flt1)
!is.na(flt1)
xm$FilterNo <- flt1[!is.na(flt1)]
# Assign filter number
flt1 <- suppressWarnings(as.integer(xm$FilterNo)) # Filter numbers when explicitely specified
xm %<>% group_by(Name) %>% mutate(FilterNo=dplyr::row_number()) # Filter numbers guessed when not explicitely specified
nrow(xm)
nrow(flt1)
length(flt1)
xm$FilterNo <- flt1[!is.na(flt1)]
str(xm$FilterNo)
str(flt1[!is.na(flt1)])
flt1
str(flt1)
flt1[!is.na(flt1)]
is.na(flt1)
xm$FilterNo <- flt1[is.na(flt1)]
xm$FilterNo <- flt1[!is.na(flt1)]
length(!is.na(flt1))
!is.na(flt1)
flt1[!is.na(flt1)]
flt1[1] <- 1
flt1[!is.na(flt1)]
length(flt1)
flt1
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
names(xm) <- names_xm
xm$Name %<>% remove_trailing_letter(.)
# Assign filter number
flt1 <- suppressWarnings(as.integer(xm$FilterNo))
lenth(flt1)
length(flt1)
flt2 <- flt1[!is.na(flt1)]
flt2
flt1 <- suppressWarnings(as.integer(xm$FilterNo)) # Filter numbers when explicitely specified
flt1_is_specified <- flt1[!is.na(flt1)]
flt1_is_specified
flt1 <- suppressWarnings(as.integer(xm$FilterNo)) # Filter numbers when explicitely specified
flt1_as_specified <- flt1[!is.na(flt1)]
length(flt1_as_specified)
con <- file(fname, "r")
x <- readLines(con, 1)
if (!(grepl("HydroMonitor - open data exchange file", x, fixed = TRUE))) {
close(con)
stop("This is not a export HydroMonitor - open data exchange file.")
}
# Check if this is not a export HydroMonitor - open data exchange file
i <- 1
is_obs_well_file <- FALSE
while (TRUE) {
x = readLines(con, 1)
found <- grepl("ObservationWell", x, fixed = TRUE)
if ((i == 100) || (found)) {
break
}
i <- i + 1
}
if (!found) {
stop("This is not a export HydroMonitor file with ObservationWell data.")
}
close(con)
# Read all lines in the file to determine
con <- file(fname, "r")
x <- readLines(con, warn = FALSE)
close(con)
# Determine start end end line number of metadata and data.
i <- which(grepl("^;;", x))
# Determine column names of metadata and data
names_xm <- x[i[1] + 1] %>% strsplit(";") %>% unlist()
names_xd <- x[i[2] + 1] %>% strsplit(";") %>% unlist()
# Read Metadata
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
names(xm) <- names_xm
xm$Name %<>% remove_trailing_letter(.)
# Assign filter number
flt1 <-
suppressWarnings(as.integer(xm$FilterNo)) # Filter numbers when explicitely specified
flt1_as_specified <- flt1[!is.na(flt1)]
xm %<>% group_by(Name) %>% mutate(FilterNo = dplyr::row_number()) # Filter numbers guessed when not explicitely specified
if (flt1_as_specified > 0) {
xm$FilterNo <- flt1_as_specified
}
xm <- xm[!is.na(xm$FilterNo),]
xm$StartDateTime <- lubridate::dmy_hm(xm$StartDateTime)
con <- file(fname, "r")
x <- readLines(con, 1)
if (!(grepl("HydroMonitor - open data exchange file", x, fixed = TRUE))) {
close(con)
stop("This is not a export HydroMonitor - open data exchange file.")
}
# Check if this is not a export HydroMonitor - open data exchange file
i <- 1
is_obs_well_file <- FALSE
while (TRUE) {
x = readLines(con, 1)
found <- grepl("ObservationWell", x, fixed = TRUE)
if ((i == 100) || (found)) {
break
}
i <- i + 1
}
if (!found) {
stop("This is not a export HydroMonitor file with ObservationWell data.")
}
close(con)
# Read all lines in the file to determine
con <- file(fname, "r")
x <- readLines(con, warn = FALSE)
close(con)
# Determine start end end line number of metadata and data.
i <- which(grepl("^;;", x))
# Determine column names of metadata and data
names_xm <- x[i[1] + 1] %>% strsplit(";") %>% unlist()
names_xd <- x[i[2] + 1] %>% strsplit(";") %>% unlist()
# Read Metadata
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
names(xm) <- names_xm
xm$Name %<>% remove_trailing_letter(.)
# Assign filter number
flt1 <-
suppressWarnings(as.integer(xm$FilterNo)) # Filter numbers when explicitely specified
flt1_as_specified <- flt1[!is.na(flt1)]
xm %<>% group_by(Name) %>% mutate(FilterNo = dplyr::row_number()) # Filter numbers guessed when not explicitely specified
if (length(flt1_as_specified) > 0) {
xm$FilterNo <- flt1_as_specified
}
xm <- xm[!is.na(xm$FilterNo),]
xm$StartDateTime <- lubridate::dmy_hm(xm$StartDateTime)
# Filter meta data on essential information
xm <-
data.frame(
NAME = xm$Name,
FILTER = xm$FilterNo,
X = xm$XCoordinate,
Y = xm$YCoordinate,
TOP = xm$FilterTopLevel,
BOT = xm$FilterBottomLevel,
MV = xm$SurfaceLevel
)
xm %<>% dplyr::arrange(NAME, FILTER)
# Read Data
xd <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[2] + 2,
row.names = NULL
)
xd <- xd[, c(1, 2, 3, 4)]
names(xd) <- c("NAME", "FILTER", "DATE", "HEAD")
xd <- xd[!is.na(xd$FILTER),]
xd$DATE <- lubridate::dmy_hms(xd$DATE)
xd$NAME %<>% remove_trailing_letter(.)
xd <- xd[!is.na(xd$HEAD),] # Remove NA values
con <- file(fname, "r")
x <- readLines(con, 1)
if (!(grepl("HydroMonitor - open data exchange file", x, fixed = TRUE))) {
close(con)
stop("This is not a export HydroMonitor - open data exchange file.")
}
# Check if this is not a export HydroMonitor - open data exchange file
i <- 1
is_obs_well_file <- FALSE
while (TRUE) {
x = readLines(con, 1)
found <- grepl("ObservationWell", x, fixed = TRUE)
if ((i == 100) || (found)) {
break
}
i <- i + 1
}
if (!found) {
stop("This is not a export HydroMonitor file with ObservationWell data.")
}
close(con)
# Read all lines in the file to determine
con <- file(fname, "r")
x <- readLines(con, warn = FALSE)
close(con)
# Determine start end end line number of metadata and data.
i <- which(grepl("^;;", x))
# Determine column names of metadata and data
names_xm <- x[i[1] + 1] %>% strsplit(";") %>% unlist()
names_xd <- x[i[2] + 1] %>% strsplit(";") %>% unlist()
# Read Metadata
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
names(xm) <- names_xm
xm$Name %<>% remove_trailing_letter(.)
# Assign filter number
flt1 <-
suppressWarnings(as.integer(xm$FilterNo)) # Filter numbers when explicitely specified
flt1_as_specified <- flt1[!is.na(flt1)]
xm %<>% group_by(Name) %>% mutate(FilterNo = dplyr::row_number()) # Filter numbers guessed when not explicitely specified
if (length(flt1_as_specified) > 0) {
xm$FilterNo <- flt1_as_specified
}
xm <- xm[!is.na(xm$FilterNo),]
xm$StartDateTime <- lubridate::dmy_hm(xm$StartDateTime)
head(xm)
xm <-
data.frame(
NAME = xm$Name,
FILTER = xm$FilterNo,
X = xm$XCoordinate,
Y = xm$YCoordinate,
TOP = xm$FilterTopLevel,
BOT = xm$FilterBottomLevel,
MV = xm$SurfaceLevel
)
xm %<>% dplyr::arrange(NAME, FILTER)
xd <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[2] + 2,
row.names = NULL
)
head(xd)
fname
i
i[2] + 2
xd <- xd[, c(1, 2, 3, 4)]
names(xd) <- c("NAME", "FILTER", "DATE", "HEAD")
xd <- xd[!is.na(xd$FILTER),]
xd$DATE <- lubridate::dmy_hms(xd$DATE)
xd$NAME %<>% remove_trailing_letter(.)
xd <- xd[!is.na(xd$HEAD),] # Remove NA values
hm <- list()
hm$xm <- xm
hm$xd <- xd
# Remove double filters and observations
hm %<>% hm_rm_dble_fltrs()
hm %<>% hm_rm_dble_obs()
xd
hm %<>% hm_rm_dble_fltrs()
hm %<>% hm_rm_dble_obs()
library(devtools)
fname <- system.file("extdata","export_data_menyanthes(2).csv",package="menyanthes")
con <- file(fname, "r")
x <- readLines(con, 1)
if (!(grepl("HydroMonitor - open data exchange file", x, fixed = TRUE))) {
close(con)
stop("This is not a export HydroMonitor - open data exchange file.")
}
# Check if this is not a export HydroMonitor - open data exchange file
i <- 1
is_obs_well_file <- FALSE
while (TRUE) {
x = readLines(con, 1)
found <- grepl("ObservationWell", x, fixed = TRUE)
if ((i == 100) || (found)) {
break
}
i <- i + 1
}
if (!found) {
stop("This is not a export HydroMonitor file with ObservationWell data.")
}
close(con)
load_all()
con <- file(fname, "r")
x <- readLines(con, 1)
if (!(grepl("HydroMonitor - open data exchange file", x, fixed = TRUE))) {
close(con)
stop("This is not a export HydroMonitor - open data exchange file.")
}
# Check if this is not a export HydroMonitor - open data exchange file
i <- 1
is_obs_well_file <- FALSE
while (TRUE) {
x = readLines(con, 1)
found <- grepl("ObservationWell", x, fixed = TRUE)
if ((i == 100) || (found)) {
break
}
i <- i + 1
}
if (!found) {
stop("This is not a export HydroMonitor file with ObservationWell data.")
}
close(con)
fname
fname <- system.file("extdata","export_data_menyanthes(2).csv",package="menyanthes")
fname
con <- file(fname, "r")
x <- readLines(con, 1)
if (!(grepl("HydroMonitor - open data exchange file", x, fixed = TRUE))) {
close(con)
stop("This is not a export HydroMonitor - open data exchange file.")
}
# Check if this is not a export HydroMonitor - open data exchange file
i <- 1
is_obs_well_file <- FALSE
while (TRUE) {
x = readLines(con, 1)
found <- grepl("ObservationWell", x, fixed = TRUE)
if ((i == 100) || (found)) {
break
}
i <- i + 1
}
if (!found) {
stop("This is not a export HydroMonitor file with ObservationWell data.")
}
close(con)
con <- file(fname, "r")
x <- readLines(con, warn = FALSE)
close(con)
# Determine start end end line number of metadata and data.
i <- which(grepl("^;;", x))
# Determine column names of metadata and data
names_xm <- x[i[1] + 1] %>% strsplit(";") %>% unlist()
names_xd <- x[i[2] + 1] %>% strsplit(";") %>% unlist()
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
names(xm) <- names_xm
xm$FilterNo <- suppressWarnings(as.integer(xm$FilterNo))
xm <- xm[!is.na(xm$FilterNo),]
nrow(xm)
xm <- read.csv2(
fname,
header = FALSE,
sep = ";",
quote = "\"",
fill = TRUE,
skip = i[1] + 2,
row.names = NULL
)
xm$V19 <- NULL
names(xm) <- names_xm
nrow(xm)
xm$FilterNo <- suppressWarnings(as.integer(xm$FilterNo))
is.na(xm$FilterNo)
all(is.na(xm$FilterNo)==TRUE)
?stop
library(menyanthes)
